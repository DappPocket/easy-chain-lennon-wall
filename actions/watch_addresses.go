package actions

import (

  "fmt"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/DappPocket/easy_chain_lennon/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (WatchAddress)
// DB Table: Plural (watch_addresses)
// Resource: Plural (WatchAddresses)
// Path: Plural (/watch_addresses)
// View Template Folder: Plural (/templates/watch_addresses/)

// WatchAddressesResource is the resource for the WatchAddress model
type WatchAddressesResource struct{
  buffalo.Resource
}

// List gets all WatchAddresses. This function is mapped to the path
// GET /watch_addresses
func (v WatchAddressesResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  watchAddresses := &models.WatchAddresses{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all WatchAddresses from the DB
  if err := q.All(watchAddresses); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, watchAddresses))
}

// Show gets the data for one WatchAddress. This function is mapped to
// the path GET /watch_addresses/{watch_address_id}
func (v WatchAddressesResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty WatchAddress
  watchAddress := &models.WatchAddress{}

  // To find the WatchAddress the parameter watch_address_id is used.
  if err := tx.Find(watchAddress, c.Param("watch_address_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, watchAddress))
}

// New renders the form for creating a new WatchAddress.
// This function is mapped to the path GET /watch_addresses/new
func (v WatchAddressesResource) New(c buffalo.Context) error {
  return c.Render(200, r.Auto(c, &models.WatchAddress{}))
}
// Create adds a WatchAddress to the DB. This function is mapped to the
// path POST /watch_addresses
func (v WatchAddressesResource) Create(c buffalo.Context) error {
  // Allocate an empty WatchAddress
  watchAddress := &models.WatchAddress{}

  // Bind watchAddress to the html form elements
  if err := c.Bind(watchAddress); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(watchAddress)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, watchAddress))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "watchAddress.created.success"))
  // and redirect to the watch_addresses index page
  return c.Render(201, r.Auto(c, watchAddress))
}

// Edit renders a edit form for a WatchAddress. This function is
// mapped to the path GET /watch_addresses/{watch_address_id}/edit
func (v WatchAddressesResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty WatchAddress
  watchAddress := &models.WatchAddress{}

  if err := tx.Find(watchAddress, c.Param("watch_address_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, watchAddress))
}
// Update changes a WatchAddress in the DB. This function is mapped to
// the path PUT /watch_addresses/{watch_address_id}
func (v WatchAddressesResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty WatchAddress
  watchAddress := &models.WatchAddress{}

  if err := tx.Find(watchAddress, c.Param("watch_address_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind WatchAddress to the html form elements
  if err := c.Bind(watchAddress); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(watchAddress)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, watchAddress))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "watchAddress.updated.success"))
  // and redirect to the watch_addresses index page
  return c.Render(200, r.Auto(c, watchAddress))
}

// Destroy deletes a WatchAddress from the DB. This function is mapped
// to the path DELETE /watch_addresses/{watch_address_id}
func (v WatchAddressesResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty WatchAddress
  watchAddress := &models.WatchAddress{}

  // To find the WatchAddress the parameter watch_address_id is used.
  if err := tx.Find(watchAddress, c.Param("watch_address_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(watchAddress); err != nil {
    return err
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", T.Translate(c, "watchAddress.destroyed.success"))
  // Redirect to the watch_addresses index page
  return c.Render(200, r.Auto(c, watchAddress))
}
